// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if platform and storyboards %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set isAppKit %}{% if platform == "macOS" %}true{% endif %}{% endset %}
{% set prefix %}{% if isAppKit %}NS{% else %}UI{% endif %}{% endset %}
{% set controller %}{% if isAppKit %}Controller{% else %}ViewController{% endif %}{% endset %}
// swiftlint:disable sorted_imports
import Foundation
import {% if isAppKit %}Cocoa{% else %}UIKit{% endif %}
{% for module in modules where module != env.PRODUCT_MODULE_NAME and module != param.module %}
import {{module}}
{% endfor %}

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

{# This first part of the code is static, same every time whatever Storyboard you have #}
{{accessModifier}} protocol StoryboardType {
  static var storyboardName: String { get }
}

{{accessModifier}} extension StoryboardType {
  static var storyboard: {{prefix}}Storyboard {
    let name = {% if isAppKit %}NSStoryboard.Name({% endif %}self.storyboardName{% if isAppKit %}){% endif %}
    return {{prefix}}Storyboard(name: name, bundle: Bundle(for: BundleToken.self))
  }
}

{{accessModifier}} struct SceneType<T: Any> {
  {{accessModifier}} let storyboard: StoryboardType.Type
  {{accessModifier}} let identifier: String

  {{accessModifier}} func instantiate() -> T {
    let identifier = {% if isAppKit %}NSStoryboard.SceneIdentifier({% endif %}self.identifier{% if isAppKit %}){% endif %}
    guard let controller = storyboard.storyboard.instantiate{{controller}}(withIdentifier: identifier) as? T else {
      fatalError("{{controller}} '\(identifier)' is not of the expected class \(T.self).")
    }
    return controller
  }
}

{{accessModifier}} struct InitialSceneType<T: Any> {
  {{accessModifier}} let storyboard: StoryboardType.Type

  {{accessModifier}} func instantiate() -> T {
    guard let controller = storyboard.storyboard.instantiateInitial{{controller}}() as? T else {
      fatalError("{{controller}} is not of the expected class \(T.self).")
    }
    return controller
  }
}

{{accessModifier}} protocol SegueType: RawRepresentable { }

{{accessModifier}} extension {% if isAppKit %}NSSeguePerforming{% else %}UIViewController{% endif %} {
  func perform<S: SegueType>(segue: S, sender: Any? = nil) where S.RawValue == String {
    let identifier = {% if isAppKit %}NSStoryboardSegue.Identifier({% endif %}segue.rawValue{% if isAppKit %}){% endif %}
    performSegue{% if isAppKit %}?{% endif %}(withIdentifier: identifier, sender: sender)
  }
}

{# This is where the generation begins, this code depends on what you have in your Storyboards #}
// swiftlint:disable explicit_type_interface identifier_name line_length type_body_length type_name
{% set sceneEnumName %}{{param.sceneEnumName|default:"StoryboardScene"}}{% endset %}
{% macro className scene %}{% filter removeNewlines %}
  {% if scene.customClass %}
    {% if scene.customModule %}
      {% if not param.ignoreTargetModule or scene.customModule != env.PRODUCT_MODULE_NAME and scene.customModule != param.module %}
        {{scene.customModule}}.
      {% endif %}
    {% endif %}
    {{scene.customClass}}
  {% else %}
    {{prefix}}{{scene.baseType}}
  {% endif %}
{% endfilter %}{% endmacro %}
{{accessModifier}} enum {{sceneEnumName}} {
  {% for storyboard in storyboards %}
  {% set storyboardName %}{{storyboard.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}{% endset %}
  {{accessModifier}} enum {{storyboardName}}: StoryboardType {
    {{accessModifier}} static let storyboardName = "{{storyboard.name}}"
    {% if storyboard.initialScene %}

    {% set sceneClass %}{% call className storyboard.initialScene %}{% endset %}
    {{accessModifier}} static let initialScene = InitialSceneType<{{sceneClass}}>(storyboard: {{storyboardName}}.self)
    {% endif %}
    {% for scene in storyboard.scenes %}

    {% set sceneID %}{{scene.identifier|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
    {% set sceneClass %}{% call className scene %}{% endset %}
    {{accessModifier}} static let {{sceneID}} = SceneType<{{sceneClass}}>(storyboard: {{storyboardName}}.self, identifier: "{{scene.identifier}}")
    {% endfor %}
  }
  {% endfor %}
}

{{accessModifier}} enum {{param.segueEnumName|default:"StoryboardSegue"}} {
  {% for storyboard in storyboards where storyboard.segues %}
  {{accessModifier}} enum {{storyboard.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}: String, SegueType {
    {% for segue in storyboard.segues %}
    {% set segueID %}{{segue.identifier|swiftIdentifier:"pretty"|lowerFirstWord}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segueID != segue.identifier %} = "{{segue.identifier}}"{% endif %}
    {% endfor %}
  }
  {% endfor %}
}
// swiftlint:enable explicit_type_interface identifier_name line_length type_body_length type_name

private final class BundleToken {}
{% elif storyboards %}
// Mixed AppKit and UIKit storyboard files found, please invoke swiftgen with these separately
{% else %}
// No storyboard found
{% endif %}
